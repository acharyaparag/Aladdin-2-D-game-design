#include <iostream>
#include <cmath>
#include "scaledSprite.h"
#include "gamedata.h"
#include "frameFactory.h"

/*float getRandFloat(float min, float max) {
    return min + (rand() / (RAND_MAX + 1.0f)) * (max - min);
}

int getRandom(int a, int b) {
  return a + (rand() % b + 1);
}*/

ScaledSprite::ScaledSprite(const std::string& name, const Frame* fm,
                           float sc) :
  Drawable(name,
           Vector2f(Gamedata::getInstance()->getXmlInt(name+"X"), 
                    Gamedata::getInstance()->getXmlInt(name+"Y")), 
           Vector2f((rand()%2?1:-1)*getRandom(
                    Gamedata::getInstance()->getXmlInt(name+"Cushion"),
                    Gamedata::getInstance()->getXmlInt(name+"SpeedX")),
                    (rand()%2?1:-1)*getRandom(
                    Gamedata::getInstance()->getXmlInt(name+"Cushion"),
                    Gamedata::getInstance()->getXmlInt(name+"SpeedY"))
                   )
  ), 
  frame(fm),
  scale( sc )
{ }


ScaledSprite::ScaledSprite(const std::string &name,float sc):
  Drawable(name,
           Vector2f(Gamedata::getInstance()->getXmlInt(name+"X"), 
                    Gamedata::getInstance()->getXmlInt(name+"Y")), 
           Vector2f((rand()%2?1:-1)*getRandom(
                    Gamedata::getInstance()->getXmlInt(name+"Cushion"),
                    Gamedata::getInstance()->getXmlInt(name+"SpeedX")),
                    (rand()%2?1:-1)*getRandom(
                    Gamedata::getInstance()->getXmlInt(name+"Cushion"),
                    Gamedata::getInstance()->getXmlInt(name+"SpeedY"))
                   )
  ), 
  frame(FrameFactory::getInstance().getScaledFrame(name,sc)),
  scale( sc )
{ }


ScaledSprite::ScaledSprite(const ScaledSprite& s) :
  Drawable(s.getName(), s.getPosition(), s.getVelocity()), 
  frame(s.frame),
  scale(s.scale)
{ }

ScaledSprite& ScaledSprite::operator=(const ScaledSprite& rhs) {
  setName( rhs.getName() );
  setPosition(rhs.getPosition());
  setVelocity(rhs.getVelocity());
  frame = rhs.frame;
  scale = rhs.scale;
  return *this;
}

void ScaledSprite::draw() const { 
  Uint32 x = static_cast<Uint32>(X());
  Uint32 y = static_cast<Uint32>(Y());
  frame->draw(x, y); 
}

unsigned ScaledSprite::getPixel(Uint32 i, Uint32 j) const { 
  Uint32 x = static_cast<Uint32>(X());
  Uint32 y = static_cast<Uint32>(Y());
  x = i - x;
  y = j - y;
  Uint32 *pixels = static_cast<Uint32 *>(frame->getSurface()->pixels);
  return pixels[ ( y * frame->getWidth() ) + x ];
}


int ScaledSprite::getDistance(const ScaledSprite *obj) const { 
  return hypot(X()-obj->X(), Y()-obj->Y());
}

void ScaledSprite::update(Uint32 ticks) { 
  float incr = velocityY() * static_cast<float>(ticks) * 0.001;
  Y( Y()+incr );
  float height = static_cast<float>(frame->getHeight());
  float scaleHeight;
  if (this->getScale() >= 1) 
  scaleHeight = 0;
  else
  scaleHeight = this->getScale();
 
  if ( Y() < 0) {
    velocityY( abs( velocityY() ) );
  }
    
  if ( Y() > scaleHeight*Gamedata::getInstance()->getXmlInt("worldHeight")-height) {
    velocityY( -abs( velocityY() ) );
  }

  incr = velocityX() * static_cast<float>(ticks) * 0.001;
  X( X()+incr );
  float width = static_cast<float>(frame->getWidth());
  if ( X() < 0) {
    velocityX( abs( velocityX() ) );
  }
  if ( X() > Gamedata::getInstance()->getXmlInt("worldWidth")-width) {
    velocityX( -abs( velocityX() ) );
  }  
}
